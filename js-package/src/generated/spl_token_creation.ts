// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.0
//   protoc               v3.21.12
// source: spl_token_creation.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "spl_token_creation";

export enum Source {
  HELIUS = 0,
  NODE = 1,
  UNRECOGNIZED = -1,
}

export function sourceFromJSON(object: any): Source {
  switch (object) {
    case 0:
    case "HELIUS":
      return Source.HELIUS;
    case 1:
    case "NODE":
      return Source.NODE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Source.UNRECOGNIZED;
  }
}

export function sourceToJSON(object: Source): string {
  switch (object) {
    case Source.HELIUS:
      return "HELIUS";
    case Source.NODE:
      return "NODE";
    case Source.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum Platform {
  PUMP_FUN = 0,
  UNRECOGNIZED = -1,
}

export function platformFromJSON(object: any): Platform {
  switch (object) {
    case 0:
    case "PUMP_FUN":
      return Platform.PUMP_FUN;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Platform.UNRECOGNIZED;
  }
}

export function platformToJSON(object: Platform): string {
  switch (object) {
    case Platform.PUMP_FUN:
      return "PUMP_FUN";
    case Platform.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SplTokenCreationNotification {
  deployer: string;
  tokenAddress: string;
  bondingCurve: string;
  associatedBondingCurve: string;
  tokenName: string;
  tokenSymbol: string;
  tokenUri: string;
  creatorBuyPercentage: number;
  timestamp: number;
  txHash: string;
  source: string;
  platform: string;
}

function createBaseSplTokenCreationNotification(): SplTokenCreationNotification {
  return {
    deployer: "",
    tokenAddress: "",
    bondingCurve: "",
    associatedBondingCurve: "",
    tokenName: "",
    tokenSymbol: "",
    tokenUri: "",
    creatorBuyPercentage: 0,
    timestamp: 0,
    txHash: "",
    source: "",
    platform: "",
  };
}

export const SplTokenCreationNotification: MessageFns<SplTokenCreationNotification> = {
  encode(message: SplTokenCreationNotification, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.deployer !== "") {
      writer.uint32(10).string(message.deployer);
    }
    if (message.tokenAddress !== "") {
      writer.uint32(18).string(message.tokenAddress);
    }
    if (message.bondingCurve !== "") {
      writer.uint32(26).string(message.bondingCurve);
    }
    if (message.associatedBondingCurve !== "") {
      writer.uint32(34).string(message.associatedBondingCurve);
    }
    if (message.tokenName !== "") {
      writer.uint32(42).string(message.tokenName);
    }
    if (message.tokenSymbol !== "") {
      writer.uint32(50).string(message.tokenSymbol);
    }
    if (message.tokenUri !== "") {
      writer.uint32(58).string(message.tokenUri);
    }
    if (message.creatorBuyPercentage !== 0) {
      writer.uint32(65).double(message.creatorBuyPercentage);
    }
    if (message.timestamp !== 0) {
      writer.uint32(72).int64(message.timestamp);
    }
    if (message.txHash !== "") {
      writer.uint32(82).string(message.txHash);
    }
    if (message.source !== "") {
      writer.uint32(90).string(message.source);
    }
    if (message.platform !== "") {
      writer.uint32(98).string(message.platform);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SplTokenCreationNotification {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSplTokenCreationNotification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.deployer = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.tokenAddress = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.bondingCurve = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.associatedBondingCurve = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tokenName = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.tokenSymbol = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.tokenUri = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.creatorBuyPercentage = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.timestamp = longToNumber(reader.int64());
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.source = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.platform = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SplTokenCreationNotification {
    return {
      deployer: isSet(object.deployer) ? globalThis.String(object.deployer) : "",
      tokenAddress: isSet(object.tokenAddress) ? globalThis.String(object.tokenAddress) : "",
      bondingCurve: isSet(object.bondingCurve) ? globalThis.String(object.bondingCurve) : "",
      associatedBondingCurve: isSet(object.associatedBondingCurve)
        ? globalThis.String(object.associatedBondingCurve)
        : "",
      tokenName: isSet(object.tokenName) ? globalThis.String(object.tokenName) : "",
      tokenSymbol: isSet(object.tokenSymbol) ? globalThis.String(object.tokenSymbol) : "",
      tokenUri: isSet(object.tokenUri) ? globalThis.String(object.tokenUri) : "",
      creatorBuyPercentage: isSet(object.creatorBuyPercentage) ? globalThis.Number(object.creatorBuyPercentage) : 0,
      timestamp: isSet(object.timestamp) ? globalThis.Number(object.timestamp) : 0,
      txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "",
      source: isSet(object.source) ? globalThis.String(object.source) : "",
      platform: isSet(object.platform) ? globalThis.String(object.platform) : "",
    };
  },

  toJSON(message: SplTokenCreationNotification): unknown {
    const obj: any = {};
    if (message.deployer !== "") {
      obj.deployer = message.deployer;
    }
    if (message.tokenAddress !== "") {
      obj.tokenAddress = message.tokenAddress;
    }
    if (message.bondingCurve !== "") {
      obj.bondingCurve = message.bondingCurve;
    }
    if (message.associatedBondingCurve !== "") {
      obj.associatedBondingCurve = message.associatedBondingCurve;
    }
    if (message.tokenName !== "") {
      obj.tokenName = message.tokenName;
    }
    if (message.tokenSymbol !== "") {
      obj.tokenSymbol = message.tokenSymbol;
    }
    if (message.tokenUri !== "") {
      obj.tokenUri = message.tokenUri;
    }
    if (message.creatorBuyPercentage !== 0) {
      obj.creatorBuyPercentage = message.creatorBuyPercentage;
    }
    if (message.timestamp !== 0) {
      obj.timestamp = Math.round(message.timestamp);
    }
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    if (message.source !== "") {
      obj.source = message.source;
    }
    if (message.platform !== "") {
      obj.platform = message.platform;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<SplTokenCreationNotification>, I>>(base?: I): SplTokenCreationNotification {
    return SplTokenCreationNotification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<SplTokenCreationNotification>, I>>(object: I): SplTokenCreationNotification {
    const message = createBaseSplTokenCreationNotification();
    message.deployer = object.deployer ?? "";
    message.tokenAddress = object.tokenAddress ?? "";
    message.bondingCurve = object.bondingCurve ?? "";
    message.associatedBondingCurve = object.associatedBondingCurve ?? "";
    message.tokenName = object.tokenName ?? "";
    message.tokenSymbol = object.tokenSymbol ?? "";
    message.tokenUri = object.tokenUri ?? "";
    message.creatorBuyPercentage = object.creatorBuyPercentage ?? 0;
    message.timestamp = object.timestamp ?? 0;
    message.txHash = object.txHash ?? "";
    message.source = object.source ?? "";
    message.platform = object.platform ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
